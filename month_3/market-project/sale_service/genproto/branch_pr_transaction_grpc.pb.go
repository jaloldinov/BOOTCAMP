// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: branch_pr_transaction.proto

package sale_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BranchPrTransactionServiceClient is the client API for BranchPrTransactionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BranchPrTransactionServiceClient interface {
	Create(ctx context.Context, in *CreateBranchPrTransactionRequest, opts ...grpc.CallOption) (*CreateBranchPrTransactionResponse, error)
	Get(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*GetBranchPrTransactionResponse, error)
	List(ctx context.Context, in *ListBranchPrTransactionRequest, opts ...grpc.CallOption) (*ListBranchPrTransactionResponse, error)
	Update(ctx context.Context, in *UpdateBranchPrTransactionRequest, opts ...grpc.CallOption) (*Response, error)
	Delete(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error)
}

type branchPrTransactionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBranchPrTransactionServiceClient(cc grpc.ClientConnInterface) BranchPrTransactionServiceClient {
	return &branchPrTransactionServiceClient{cc}
}

func (c *branchPrTransactionServiceClient) Create(ctx context.Context, in *CreateBranchPrTransactionRequest, opts ...grpc.CallOption) (*CreateBranchPrTransactionResponse, error) {
	out := new(CreateBranchPrTransactionResponse)
	err := c.cc.Invoke(ctx, "/sale_service.BranchPrTransactionService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchPrTransactionServiceClient) Get(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*GetBranchPrTransactionResponse, error) {
	out := new(GetBranchPrTransactionResponse)
	err := c.cc.Invoke(ctx, "/sale_service.BranchPrTransactionService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchPrTransactionServiceClient) List(ctx context.Context, in *ListBranchPrTransactionRequest, opts ...grpc.CallOption) (*ListBranchPrTransactionResponse, error) {
	out := new(ListBranchPrTransactionResponse)
	err := c.cc.Invoke(ctx, "/sale_service.BranchPrTransactionService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchPrTransactionServiceClient) Update(ctx context.Context, in *UpdateBranchPrTransactionRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/sale_service.BranchPrTransactionService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchPrTransactionServiceClient) Delete(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/sale_service.BranchPrTransactionService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BranchPrTransactionServiceServer is the server API for BranchPrTransactionService service.
// All implementations must embed UnimplementedBranchPrTransactionServiceServer
// for forward compatibility
type BranchPrTransactionServiceServer interface {
	Create(context.Context, *CreateBranchPrTransactionRequest) (*CreateBranchPrTransactionResponse, error)
	Get(context.Context, *IdRequest) (*GetBranchPrTransactionResponse, error)
	List(context.Context, *ListBranchPrTransactionRequest) (*ListBranchPrTransactionResponse, error)
	Update(context.Context, *UpdateBranchPrTransactionRequest) (*Response, error)
	Delete(context.Context, *IdRequest) (*Response, error)
	mustEmbedUnimplementedBranchPrTransactionServiceServer()
}

// UnimplementedBranchPrTransactionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBranchPrTransactionServiceServer struct {
}

func (UnimplementedBranchPrTransactionServiceServer) Create(context.Context, *CreateBranchPrTransactionRequest) (*CreateBranchPrTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBranchPrTransactionServiceServer) Get(context.Context, *IdRequest) (*GetBranchPrTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedBranchPrTransactionServiceServer) List(context.Context, *ListBranchPrTransactionRequest) (*ListBranchPrTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedBranchPrTransactionServiceServer) Update(context.Context, *UpdateBranchPrTransactionRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedBranchPrTransactionServiceServer) Delete(context.Context, *IdRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedBranchPrTransactionServiceServer) mustEmbedUnimplementedBranchPrTransactionServiceServer() {
}

// UnsafeBranchPrTransactionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BranchPrTransactionServiceServer will
// result in compilation errors.
type UnsafeBranchPrTransactionServiceServer interface {
	mustEmbedUnimplementedBranchPrTransactionServiceServer()
}

func RegisterBranchPrTransactionServiceServer(s grpc.ServiceRegistrar, srv BranchPrTransactionServiceServer) {
	s.RegisterService(&BranchPrTransactionService_ServiceDesc, srv)
}

func _BranchPrTransactionService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBranchPrTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchPrTransactionServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sale_service.BranchPrTransactionService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchPrTransactionServiceServer).Create(ctx, req.(*CreateBranchPrTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchPrTransactionService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchPrTransactionServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sale_service.BranchPrTransactionService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchPrTransactionServiceServer).Get(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchPrTransactionService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBranchPrTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchPrTransactionServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sale_service.BranchPrTransactionService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchPrTransactionServiceServer).List(ctx, req.(*ListBranchPrTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchPrTransactionService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBranchPrTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchPrTransactionServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sale_service.BranchPrTransactionService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchPrTransactionServiceServer).Update(ctx, req.(*UpdateBranchPrTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchPrTransactionService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchPrTransactionServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sale_service.BranchPrTransactionService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchPrTransactionServiceServer).Delete(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BranchPrTransactionService_ServiceDesc is the grpc.ServiceDesc for BranchPrTransactionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BranchPrTransactionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sale_service.BranchPrTransactionService",
	HandlerType: (*BranchPrTransactionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _BranchPrTransactionService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _BranchPrTransactionService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _BranchPrTransactionService_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _BranchPrTransactionService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _BranchPrTransactionService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "branch_pr_transaction.proto",
}
